{"ast":null,"code":"import _toConsumableArray from\"/Users/ayushdhananjai/Documents/PersonalProjects/GitHubUsersFrontEnd/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/Users/ayushdhananjai/Documents/PersonalProjects/GitHubUsersFrontEnd/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{Fragment,useState,useEffect}from'react';import Header from'./components/Header/header';import SendIcon from'@material-ui/icons/Send';import CircularProgress from'@mui/material/CircularProgress';import{v4 as uuidv4}from'uuid';import asyncApiFunctions from'./api/service';import Usernames from'./components/Usernames/usernames';// declare a set to keep track of duplicate usernames\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var allUserNames=new Set();/**\n * The main application that renders a list of repo names based on a given set of usernames\n * @returns the GitHubUsernames component.\n */var GitHubUsernames=function GitHubUsernames(){/*\n    States:\n      - usernames: declare a state variable that keeps track of all the usernames added so far.\n      - repoNames: declare a state variable that tracks the names of the repositories. \n      - unfoundUsersList: keeps track of all the users who haven't been found in the database.\n      - loading: state variable to show the data is loading.\n      - errorMsg: this displays any error message that we may get.\n  */var _useState=useState([]),_useState2=_slicedToArray(_useState,2),usernames=_useState2[0],setUsernames=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),repoNames=_useState4[0],setRepoNames=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),unfoundUsersList=_useState6[0],setUnfoundUsersList=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),loading=_useState8[0],setLoading=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),errorMsg=_useState10[0],setErrorMsg=_useState10[1];/**\n   * This method is called when the 'send' button is pressed.\n   * @param {*} e the event \n   */var handleSubmit=function handleSubmit(e){// set the loading icon to be true\nsetLoading(true);e.preventDefault();// make a call to the service file \nasyncApiFunctions.getRepoNames(usernames).then(function(returnedData){// set the repoNames variable to what is returned\n// from the database\nsetRepoNames(returnedData);// separate the input username list into two lists: one for\n// users who exist in the database and one for users who don't..\nvar actualUsersReturned=new Set();// transfer all the returned usernames into a set for quick lookup and extract\n// the previous state of the 'unfound' list\nfor(var i=0;i<returnedData.length;i++){actualUsersReturned.add(returnedData[i].username);}var notFoundList=[];/**\n       * if the username doesn't exist in our set from before, then we add it \n       * to the list of usernames that haven't been found and show it to the user.\n       * @param {*} username the username in question. \n       */function determineOccurrence(username){if(!actualUsersReturned.has(username)&&!notFoundList.includes(username)){notFoundList.push(username);}}// go through the set of all usernames the user inputted initially, and \n// apply the determineOccurrence function on them.\nallUserNames.forEach(function(each){return determineOccurrence(each);});// set the state variable that shows which usernames haven't been found.\nsetUnfoundUsersList(notFoundList);// if there was an error message, then reset it and turn the loading symbol off.\nsetErrorMsg('');setLoading(false);}).catch(function(err){// let the user know that there is an error\nsetErrorMsg('Uh oh! Unable to retrieve the data for the following reason: '+err.message);resetStateVars();});};/**\n   * \n   */var resetStateVars=function resetStateVars(){setLoading(false);// reset all other information\nsetUnfoundUsersList([]);setRepoNames([]);};/**\n   * Re-render the component whenever the usernames, repoNames or displayCount \n   * state variables change.\n   */useEffect(function(){// console.log(unfoundUsersList);\nconsole.log(repoNames);},[repoNames]);/**\n   * Callback function to remove a field/username entry from\n   * the inputFields array\n   * @param {*} id the id of the field in question\n   */var removeUsernames=function removeUsernames(id){// extract the previous state\nvar values=_toConsumableArray(usernames);// find the index at which the username exists in our state variable\nvar idxToDelete=values.findIndex(function(value){return value.id===id;});// extract the username\nvar usernameToDelete=values[idxToDelete].userName;// find the username we want to remove\nvalues.splice(idxToDelete,1);// set the usernames variable again\nsetUsernames(values);// remove the username from the set\nallUserNames.delete(usernameToDelete);};/**\n   *  Callback function to add a new entry to the usernames array\n   * @param {*} event \n   */var addUsernames=function addUsernames(event){// we only add an entry of there is a username typed in\nif(event.target.value!==''&&!allUserNames.has(event.target.value)){// extract the previous state of the usernames array and save\n// it in a new variable\nvar values=_toConsumableArray(usernames);// push a new object to the values array\nvalues.push({id:uuidv4(),userName:event.target.value});// set the usernames state variable\nsetUsernames(values);// add to the set\nallUserNames.add(event.target.value);// make the input field empty\nevent.target.value='';}};return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-center flex-col\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-xl text-center dark:text-black text-white\",children:\"Search for public repositories by username!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center flex-wrap rounded border bg-gray-200 py-2 px-4 max-w-[500px] xs:min-w-[400px] sm:min-w-[500px] md:min-w-[500px] mx-5 my-5\",children:[usernames.map(function(username){return/*#__PURE__*/_jsxs(\"li\",{className:\"mr-2 my-1 px-2 py-1 rounded-full bg-gray-300 text-gray-700 flex flex-wrap\",children:[/*#__PURE__*/_jsx(\"span\",{children:username.userName}),/*#__PURE__*/_jsx(\"span\",{onClick:function onClick(){return removeUsernames(username.id);},children:/*#__PURE__*/_jsx(\"i\",{className:\"fa-solid fa-x pl-2\"})})]},username.id);}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Press enter to add username\",onKeyDown:function onKeyDown(event){return event.key==='Enter'?addUsernames(event):null;},className:\"bg-gray-200 focus:outline-none w-full\"})]}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleSubmit,className:\"bg-transparent dark:hover:bg-blue-500 dark:hover:border-transparent text-white font-semibold hover:text-white py-2 px-4 border bg-[#2b3945] dark:hover:text-white dark:border-blue-700 dark:text-blue-700 hover:border-transparent rounded  hover:bg-[#2b3945] hover:text-white\",id:\"send-button\",children:[\"Send \\xA0 \",/*#__PURE__*/_jsx(SendIcon,{})]}),unfoundUsersList.length>0?/*#__PURE__*/_jsx(\"div\",{className:\"flex mt-2 justify-center dark:text-black text-white mx-auto text-center max-w-[500px]\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"No data for the following user(s) in the database:\",unfoundUsersList.map(function(each,idx){return/*#__PURE__*/_jsxs(\"span\",{children:[idx<unfoundUsersList.length-1?/*#__PURE__*/_jsxs(_Fragment,{children:[\"\\\"\",each,\"\\\", \"]}):/*#__PURE__*/_jsxs(_Fragment,{children:[\"\\\"\",each,\"\\\".\"]}),\" \"]},idx);})]})}):/*#__PURE__*/_jsx(_Fragment,{}),errorMsg.length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"i\",{class:\"mt-5 fa-regular fa-3x fa-face-sad-tear dark:text-black text-white\"}),/*#__PURE__*/_jsx(\"span\",{className:\"mt-2 dark:text-black text-white\",children:errorMsg}),\" \"]}):/*#__PURE__*/_jsx(_Fragment,{}),loading?/*#__PURE__*/_jsxs(\"div\",{className:\"mt-5\",children:[/*#__PURE__*/_jsx(CircularProgress,{color:\"success\"}),\" \"]}):/*#__PURE__*/_jsx(_Fragment,{})]}),/*#__PURE__*/_jsx(Usernames,{usernames:repoNames})]});};export default GitHubUsernames;","map":{"version":3,"names":["React","Fragment","useState","useEffect","Header","SendIcon","CircularProgress","v4","uuidv4","asyncApiFunctions","Usernames","jsx","_jsx","jsxs","_jsxs","_Fragment","allUserNames","Set","GitHubUsernames","_useState","_useState2","_slicedToArray","usernames","setUsernames","_useState3","_useState4","repoNames","setRepoNames","_useState5","_useState6","unfoundUsersList","setUnfoundUsersList","_useState7","_useState8","loading","setLoading","_useState9","_useState10","errorMsg","setErrorMsg","handleSubmit","e","preventDefault","getRepoNames","then","returnedData","actualUsersReturned","i","length","add","username","notFoundList","determineOccurrence","has","includes","push","forEach","each","catch","err","message","resetStateVars","console","log","removeUsernames","id","values","_toConsumableArray","idxToDelete","findIndex","value","usernameToDelete","userName","splice","delete","addUsernames","event","target","children","className","map","onClick","type","placeholder","onKeyDown","key","idx","class","color"],"sources":["/Users/ayushdhananjai/Documents/PersonalProjects/GitHubUsersFrontEnd/src/App.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header/header';\nimport SendIcon from '@material-ui/icons/Send';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { v4 as uuidv4 } from 'uuid'\nimport asyncApiFunctions from './api/service';\nimport Usernames from './components/Usernames/usernames';\n\n// declare a set to keep track of duplicate usernames\nconst allUserNames = new Set();\n\n/**\n * The main application that renders a list of repo names based on a given set of usernames\n * @returns the GitHubUsernames component.\n */\nconst GitHubUsernames = () => {\n\n  /*\n    States:\n      - usernames: declare a state variable that keeps track of all the usernames added so far.\n      - repoNames: declare a state variable that tracks the names of the repositories. \n      - unfoundUsersList: keeps track of all the users who haven't been found in the database.\n      - loading: state variable to show the data is loading.\n      - errorMsg: this displays any error message that we may get.\n  */\n  const [usernames, setUsernames] = useState([]);\n  const [repoNames, setRepoNames] = useState([]);\n  const [unfoundUsersList, setUnfoundUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  /**\n   * This method is called when the 'send' button is pressed.\n   * @param {*} e the event \n   */\n  const handleSubmit = (e) => {\n\n    // set the loading icon to be true\n    setLoading(true);\n    e.preventDefault();\n\n    // make a call to the service file \n    asyncApiFunctions.getRepoNames(usernames).then(returnedData => {\n      \n      \n      // set the repoNames variable to what is returned\n      // from the database\n      setRepoNames(returnedData);\n\n      // separate the input username list into two lists: one for\n      // users who exist in the database and one for users who don't..\n      let actualUsersReturned = new Set();\n\n      // transfer all the returned usernames into a set for quick lookup and extract\n      // the previous state of the 'unfound' list\n      for (let i = 0; i < returnedData.length; i++) {\n        actualUsersReturned.add(returnedData[i].username);\n      }\n\n      let notFoundList = [];\n\n      /**\n       * if the username doesn't exist in our set from before, then we add it \n       * to the list of usernames that haven't been found and show it to the user.\n       * @param {*} username the username in question. \n       */\n      function determineOccurrence(username) {\n        if (!actualUsersReturned.has(username) && !notFoundList.includes(username)) {\n          notFoundList.push(username);\n        }\n      }\n\n      // go through the set of all usernames the user inputted initially, and \n      // apply the determineOccurrence function on them.\n      allUserNames.forEach((each) => determineOccurrence(each));\n      \n      // set the state variable that shows which usernames haven't been found.\n      setUnfoundUsersList(notFoundList);\n\n      // if there was an error message, then reset it and turn the loading symbol off.\n      setErrorMsg('');\n      setLoading(false);\n    }).catch(err => {\n      // let the user know that there is an error\n      setErrorMsg('Uh oh! Unable to retrieve the data for the following reason: ' + err.message);\n\n      resetStateVars();\n\n    });\n\n  };\n\n  /**\n   * \n   */\n  const resetStateVars = () => {\n    setLoading(false);\n\n    // reset all other information\n    setUnfoundUsersList([]);\n    setRepoNames([]);\n  }\n  \n  /**\n   * Re-render the component whenever the usernames, repoNames or displayCount \n   * state variables change.\n   */\n  useEffect(() => {\n    // console.log(unfoundUsersList);\n    console.log(repoNames);\n  }, [repoNames]);\n\n  /**\n   * Callback function to remove a field/username entry from\n   * the inputFields array\n   * @param {*} id the id of the field in question\n   */\n\tconst removeUsernames = (id) => {\n    // extract the previous state\n    const values  = [...usernames];\n\n    // find the index at which the username exists in our state variable\n    let idxToDelete = values.findIndex(value => value.id === id);\n\n    // extract the username\n    const usernameToDelete = values[idxToDelete].userName;\n    \n    // find the username we want to remove\n    values.splice(idxToDelete, 1);\n\n    // set the usernames variable again\n    setUsernames(values);\n\n    // remove the username from the set\n    allUserNames.delete(usernameToDelete);\n\t};\n  \n  /**\n   *  Callback function to add a new entry to the usernames array\n   * @param {*} event \n   */\n\tconst addUsernames = event => {\n    // we only add an entry of there is a username typed in\n\t\tif (event.target.value !== '' && !allUserNames.has(event.target.value)) {\n\n      // extract the previous state of the usernames array and save\n      // it in a new variable\n      const values = [...usernames];\n\n      // push a new object to the values array\n      values.push({ id: uuidv4(),  userName: event.target.value});\n\n      // set the usernames state variable\n      setUsernames(values);\n\n      // add to the set\n      allUserNames.add(event.target.value);\n\n      // make the input field empty\n\t\t\tevent.target.value = '';\n\t\t}\n\t};\n\n  return (\n    <Fragment>\n      <Header/>\n        <div className='flex items-center justify-center flex-col'>\n          <h1 className='text-xl text-center dark:text-black text-white'>Search for public repositories by username!</h1>\n          <div className='flex items-center flex-wrap rounded border bg-gray-200 py-2 px-4 max-w-[500px] xs:min-w-[400px] sm:min-w-[500px] md:min-w-[500px] mx-5 my-5'>\n            {usernames.map((username) => (\n              <li key={username.id} className='mr-2 my-1 px-2 py-1 rounded-full bg-gray-300 text-gray-700 flex flex-wrap'>\n                <span>{username.userName}</span>\n                <span onClick={() => removeUsernames(username.id)}>\n                  <i className='fa-solid fa-x pl-2'></i>\n                </span>\n              </li>\n            ))}\n            <input type='text' placeholder='Press enter to add username' onKeyDown={event => event.key === 'Enter' ? addUsernames(event) : null} \n            className='bg-gray-200 focus:outline-none w-full'/>\n          </div>\n          <button onClick={handleSubmit} className='bg-transparent dark:hover:bg-blue-500 dark:hover:border-transparent\n          text-white font-semibold hover:text-white py-2 px-4 border bg-[#2b3945] dark:hover:text-white\n          dark:border-blue-700 dark:text-blue-700 hover:border-transparent rounded \n          hover:bg-[#2b3945] hover:text-white'  id='send-button'>\n            Send &nbsp; <SendIcon />\n          </button>\n\n          {unfoundUsersList.length > 0 ? \n            <div className='flex mt-2 justify-center dark:text-black text-white mx-auto text-center max-w-[500px]'>\n              <span>No data for the following user(s) in the database: \n              {unfoundUsersList.map((each, idx) => ( <span key={idx}>\n                {\n                  idx < unfoundUsersList.length - 1 ? <>\"{each}\", </> : <>\"{each}\".</>\n                } </span>\n              ))}</span>\n            </div> : <></>}\n            {errorMsg.length > 0 ? <><i class='mt-5 fa-regular fa-3x fa-face-sad-tear dark:text-black text-white'></i>\n            <span className='mt-2 dark:text-black text-white'>{errorMsg}</span> </> : <></>}\n            {loading ? <div className='mt-5'>\n              <CircularProgress color='success'/> </div>\n            : <></>\n            }\n        </div> \n      <Usernames usernames={repoNames} />\n    </Fragment>\n  )\n}\n\n\nexport default GitHubUsernames;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}