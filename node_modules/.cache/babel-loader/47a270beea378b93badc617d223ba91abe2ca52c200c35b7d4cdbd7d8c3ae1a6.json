{"ast":null,"code":"var _jsxFileName = \"/Users/ayushdhananjai/Documents/PersonalProjects/GitHubUsers/github-users-client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header/header';\nimport SendIcon from '@material-ui/icons/Send';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { v4 as uuidv4 } from 'uuid';\nimport asyncApiFunctions from './api/service';\nimport Usernames from './components/Usernames/usernames';\n\n// declare a set to keep track of duplicate usernames\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst allUserNames = new Set();\n\n/**\n * The main application that renders a list of repo names based on a given set of usernames\n * @returns the GitHubUsernames component.\n */\nconst GitHubUsernames = () => {\n  _s();\n  /*\n    States:\n      - usernames: declare a state variable that keeps track of all the usernames added so far.\n      - repoNames: declare a state variable that tracks the names of the repositories. \n      - unfoundUsersList: keeps track of all the users who haven't been found in the database.\n      - loading: state variable to show the data is loading.\n      - errorMsg: this displays any error message that we may get.\n  */\n  const [usernames, setUsernames] = useState([]);\n  const [repoNames, setRepoNames] = useState([]);\n  const [unfoundUsersList, setUnfoundUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  /**\n   * This method is called when the 'send' button is pressed.\n   * @param {*} e the event \n   */\n  const handleSubmit = e => {\n    // set the loading icon to be true\n    setLoading(true);\n    e.preventDefault();\n\n    // make a call to the service file \n    asyncApiFunctions.getRepoNames(usernames).then(returnedData => {\n      // set the repoNames variable to what is returned\n      // from the database\n      setRepoNames(returnedData);\n\n      // separate the input username list into two lists: one for\n      // users who exist in the database and one for users who don't..\n      let actualUsersReturned = new Set();\n\n      // transfer all the returned usernames into a set for quick lookup and extract\n      // the previous state of the 'unfound' list\n      for (let i = 0; i < returnedData.length; i++) {\n        actualUsersReturned.add(returnedData[i].username);\n      }\n      let notFoundList = [];\n\n      /**\n       * if the username doesn't exist in our set from before, then we add it \n       * to the list of usernames that haven't been found and show it to the user.\n       * @param {*} username the username in question. \n       */\n      function determineOccurrence(username) {\n        if (!actualUsersReturned.has(username) && !notFoundList.includes(username)) {\n          notFoundList.push(username);\n        }\n      }\n\n      // go through the set of all usernames the user inputted initially, and \n      // apply the determineOccurrence function on them.\n      allUserNames.forEach(each => determineOccurrence(each));\n\n      // set the state variable that shows which usernames haven't been found.\n      setUnfoundUsersList(notFoundList);\n\n      // if there was an error message, then reset it and turn the loading symbol off.\n      setErrorMsg('');\n      setLoading(false);\n    }).catch(err => {\n      // let the user know that there is an error\n      setErrorMsg('Uh oh! Unable to retrieve the data for the following reason: ' + err.message);\n      resetStateVars();\n    });\n  };\n\n  /**\n   * \n   */\n  const resetStateVars = () => {\n    setLoading(false);\n\n    // reset all other information\n    setUnfoundUsersList([]);\n    setRepoNames([]);\n  };\n\n  /**\n   * Re-render the component whenever the usernames, repoNames or displayCount \n   * state variables change.\n   */\n  useEffect(() => {\n    // console.log(unfoundUsersList);\n    console.log(repoNames);\n  }, [repoNames]);\n\n  /**\n   * Callback function to remove a field/username entry from\n   * the inputFields array\n   * @param {*} id the id of the field in question\n   */\n  const removeUsernames = id => {\n    // extract the previous state\n    const values = [...usernames];\n\n    // find the index at which the username exists in our state variable\n    let idxToDelete = values.findIndex(value => value.id === id);\n\n    // extract the username\n    const usernameToDelete = values[idxToDelete].userName;\n\n    // find the username we want to remove\n    values.splice(idxToDelete, 1);\n\n    // set the usernames variable again\n    setUsernames(values);\n\n    // remove the username from the set\n    allUserNames.delete(usernameToDelete);\n  };\n\n  /**\n   *  Callback function to add a new entry to the usernames array\n   * @param {*} event \n   */\n  const addUsernames = event => {\n    // we only add an entry of there is a username typed in\n    if (event.target.value !== '' && !allUserNames.has(event.target.value)) {\n      // extract the previous state of the usernames array and save\n      // it in a new variable\n      const values = [...usernames];\n\n      // push a new object to the values array\n      values.push({\n        id: uuidv4(),\n        userName: event.target.value\n      });\n\n      // set the usernames state variable\n      setUsernames(values);\n\n      // add to the set\n      allUserNames.add(event.target.value);\n\n      // make the input field empty\n      event.target.value = '';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-xl text-center dark:text-black text-white\",\n        children: \"Search for public repositories by username!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center flex-wrap rounded border bg-gray-200 py-2 px-4 max-w-[500px] xs:min-w-[400px] sm:min-w-[500px] md:min-w-[500px] mx-5 my-5\",\n        children: [usernames.map(username => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mr-2 my-1 px-2 py-1 rounded-full bg-gray-300 text-gray-700 flex flex-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: username.userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => removeUsernames(username.id),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa-solid fa-x pl-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }, this)]\n        }, username.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Press enter to add username\",\n          onKeyDown: event => event.key === 'Enter' ? addUsernames(event) : null,\n          className: \"bg-gray-200 focus:outline-none w-full\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        className: \"bg-transparent dark:hover:bg-blue-500 dark:hover:border-transparent text-white font-semibold hover:text-white py-2 px-4 border bg-[#2b3945] dark:hover:text-white dark:border-blue-700 dark:text-blue-700 hover:border-transparent rounded  hover:bg-[#2b3945] hover:text-white\",\n        id: \"send-button\",\n        children: [\"Send \\xA0 \", /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), unfoundUsersList.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-2 justify-center dark:text-black text-white mx-auto text-center max-w-[500px]\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"No data for the following user(s) in the database:\", unfoundUsersList.map((each, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [idx < unfoundUsersList.length - 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"\\\"\", each, \"\\\", \"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"\\\"\", each, \"\\\".\"]\n            }, void 0, true), \" \"]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 54\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), errorMsg.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          class: \"mt-5 fa-regular fa-3x fa-face-sad-tear dark:text-black text-white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 38\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mt-2 dark:text-black text-white\",\n          children: errorMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n          color: \"success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Usernames, {\n      usernames: repoNames\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(GitHubUsernames, \"2TU1mPkWYIz7KJUEAE7EWjoigLA=\");\n_c = GitHubUsernames;\nexport default GitHubUsernames;\nvar _c;\n$RefreshReg$(_c, \"GitHubUsernames\");","map":{"version":3,"names":["React","Fragment","useState","useEffect","Header","SendIcon","CircularProgress","v4","uuidv4","asyncApiFunctions","Usernames","jsxDEV","_jsxDEV","_Fragment","allUserNames","Set","GitHubUsernames","_s","usernames","setUsernames","repoNames","setRepoNames","unfoundUsersList","setUnfoundUsersList","loading","setLoading","errorMsg","setErrorMsg","handleSubmit","e","preventDefault","getRepoNames","then","returnedData","actualUsersReturned","i","length","add","username","notFoundList","determineOccurrence","has","includes","push","forEach","each","catch","err","message","resetStateVars","console","log","removeUsernames","id","values","idxToDelete","findIndex","value","usernameToDelete","userName","splice","delete","addUsernames","event","target","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","type","placeholder","onKeyDown","key","idx","class","color","_c","$RefreshReg$"],"sources":["/Users/ayushdhananjai/Documents/PersonalProjects/GitHubUsers/github-users-client/src/App.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport Header from './components/Header/header';\nimport SendIcon from '@material-ui/icons/Send';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport { v4 as uuidv4 } from 'uuid'\nimport asyncApiFunctions from './api/service';\nimport Usernames from './components/Usernames/usernames';\n\n// declare a set to keep track of duplicate usernames\nconst allUserNames = new Set();\n\n/**\n * The main application that renders a list of repo names based on a given set of usernames\n * @returns the GitHubUsernames component.\n */\nconst GitHubUsernames = () => {\n\n  /*\n    States:\n      - usernames: declare a state variable that keeps track of all the usernames added so far.\n      - repoNames: declare a state variable that tracks the names of the repositories. \n      - unfoundUsersList: keeps track of all the users who haven't been found in the database.\n      - loading: state variable to show the data is loading.\n      - errorMsg: this displays any error message that we may get.\n  */\n  const [usernames, setUsernames] = useState([]);\n  const [repoNames, setRepoNames] = useState([]);\n  const [unfoundUsersList, setUnfoundUsersList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n\n  /**\n   * This method is called when the 'send' button is pressed.\n   * @param {*} e the event \n   */\n  const handleSubmit = (e) => {\n\n    // set the loading icon to be true\n    setLoading(true);\n    e.preventDefault();\n\n    // make a call to the service file \n    asyncApiFunctions.getRepoNames(usernames).then(returnedData => {\n      \n      \n      // set the repoNames variable to what is returned\n      // from the database\n      setRepoNames(returnedData);\n\n      // separate the input username list into two lists: one for\n      // users who exist in the database and one for users who don't..\n      let actualUsersReturned = new Set();\n\n      // transfer all the returned usernames into a set for quick lookup and extract\n      // the previous state of the 'unfound' list\n      for (let i = 0; i < returnedData.length; i++) {\n        actualUsersReturned.add(returnedData[i].username);\n      }\n\n      let notFoundList = [];\n\n      /**\n       * if the username doesn't exist in our set from before, then we add it \n       * to the list of usernames that haven't been found and show it to the user.\n       * @param {*} username the username in question. \n       */\n      function determineOccurrence(username) {\n        if (!actualUsersReturned.has(username) && !notFoundList.includes(username)) {\n          notFoundList.push(username);\n        }\n      }\n\n      // go through the set of all usernames the user inputted initially, and \n      // apply the determineOccurrence function on them.\n      allUserNames.forEach((each) => determineOccurrence(each));\n      \n      // set the state variable that shows which usernames haven't been found.\n      setUnfoundUsersList(notFoundList);\n\n      // if there was an error message, then reset it and turn the loading symbol off.\n      setErrorMsg('');\n      setLoading(false);\n    }).catch(err => {\n      // let the user know that there is an error\n      setErrorMsg('Uh oh! Unable to retrieve the data for the following reason: ' + err.message);\n\n      resetStateVars();\n\n    });\n\n  };\n\n  /**\n   * \n   */\n  const resetStateVars = () => {\n    setLoading(false);\n\n    // reset all other information\n    setUnfoundUsersList([]);\n    setRepoNames([]);\n  }\n  \n  /**\n   * Re-render the component whenever the usernames, repoNames or displayCount \n   * state variables change.\n   */\n  useEffect(() => {\n    // console.log(unfoundUsersList);\n    console.log(repoNames);\n  }, [repoNames]);\n\n  /**\n   * Callback function to remove a field/username entry from\n   * the inputFields array\n   * @param {*} id the id of the field in question\n   */\n\tconst removeUsernames = (id) => {\n    // extract the previous state\n    const values  = [...usernames];\n\n    // find the index at which the username exists in our state variable\n    let idxToDelete = values.findIndex(value => value.id === id);\n\n    // extract the username\n    const usernameToDelete = values[idxToDelete].userName;\n    \n    // find the username we want to remove\n    values.splice(idxToDelete, 1);\n\n    // set the usernames variable again\n    setUsernames(values);\n\n    // remove the username from the set\n    allUserNames.delete(usernameToDelete);\n\t};\n  \n  /**\n   *  Callback function to add a new entry to the usernames array\n   * @param {*} event \n   */\n\tconst addUsernames = event => {\n    // we only add an entry of there is a username typed in\n\t\tif (event.target.value !== '' && !allUserNames.has(event.target.value)) {\n\n      // extract the previous state of the usernames array and save\n      // it in a new variable\n      const values = [...usernames];\n\n      // push a new object to the values array\n      values.push({ id: uuidv4(),  userName: event.target.value});\n\n      // set the usernames state variable\n      setUsernames(values);\n\n      // add to the set\n      allUserNames.add(event.target.value);\n\n      // make the input field empty\n\t\t\tevent.target.value = '';\n\t\t}\n\t};\n\n  return (\n    <Fragment>\n      <Header/>\n        <div className='flex items-center justify-center flex-col'>\n          <h1 className='text-xl text-center dark:text-black text-white'>Search for public repositories by username!</h1>\n          <div className='flex items-center flex-wrap rounded border bg-gray-200 py-2 px-4 max-w-[500px] xs:min-w-[400px] sm:min-w-[500px] md:min-w-[500px] mx-5 my-5'>\n            {usernames.map((username) => (\n              <li key={username.id} className='mr-2 my-1 px-2 py-1 rounded-full bg-gray-300 text-gray-700 flex flex-wrap'>\n                <span>{username.userName}</span>\n                <span onClick={() => removeUsernames(username.id)}>\n                  <i className='fa-solid fa-x pl-2'></i>\n                </span>\n              </li>\n            ))}\n            <input type='text' placeholder='Press enter to add username' onKeyDown={event => event.key === 'Enter' ? addUsernames(event) : null} \n            className='bg-gray-200 focus:outline-none w-full'/>\n          </div>\n          <button onClick={handleSubmit} className='bg-transparent dark:hover:bg-blue-500 dark:hover:border-transparent\n          text-white font-semibold hover:text-white py-2 px-4 border bg-[#2b3945] dark:hover:text-white\n          dark:border-blue-700 dark:text-blue-700 hover:border-transparent rounded \n          hover:bg-[#2b3945] hover:text-white'  id='send-button'>\n            Send &nbsp; <SendIcon />\n          </button>\n\n          {unfoundUsersList.length > 0 ? \n            <div className='flex mt-2 justify-center dark:text-black text-white mx-auto text-center max-w-[500px]'>\n              <span>No data for the following user(s) in the database: \n              {unfoundUsersList.map((each, idx) => ( <span key={idx}>\n                {\n                  idx < unfoundUsersList.length - 1 ? <>\"{each}\", </> : <>\"{each}\".</>\n                } </span>\n              ))}</span>\n            </div> : <></>}\n            {errorMsg.length > 0 ? <><i class='mt-5 fa-regular fa-3x fa-face-sad-tear dark:text-black text-white'></i>\n            <span className='mt-2 dark:text-black text-white'>{errorMsg}</span> </> : <></>}\n            {loading ? <div className='mt-5'>\n              <CircularProgress color='success'/> </div>\n            : <></>\n            }\n        </div> \n      <Usernames usernames={repoNames} />\n    </Fragment>\n  )\n}\n\n\nexport default GitHubUsernames;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}